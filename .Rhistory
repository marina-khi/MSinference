devtools::build_vignettes()
devtools::build_vignettes()
# Chunk 1
require(multiscale)
data(temperature, package = "multiscale")
str(temperature)
# Chunk 2
t_len    <- length(temperature)
t_len
ts_start <- 1659
# Chunk 3
grid <- construct_grid(t_len)
str(grid$gset * 1)
# Chunk 4
parameters <- estimate_lrv(data = temperature,
q = 25, r_bar = 10, p = 2)
cat("Long-run variance is equal to ", parameters$lrv, "\n")
sigmahat <- sqrt(parameters$lrv)
# Chunk 5
alpha    <- 0.05
sim_runs <- 5000
# Chunk 6
deriv_order = 1
# Chunk 7
quantiles <- compute_quantiles(t_len = t_len, grid = grid,
sim_runs = 10)
probs <- as.vector(quantiles$quant[1, ])
pos   <- which.min(abs(probs - (1 - alpha)))
quant <- quantiles$quant[2, pos]
quant
result <- compute_statistics(data = temperature,
sigma = sigmahat,
grid = grid,
deriv_order = deriv_order)
str(result, vec.len = 3)
result <- compute_statistics(data = temperature,
sigma = sigmahat,
grid = grid,
deriv_order = deriv_order)
str(result, vec.len = 2)
options(repr.plot.width = 8, repr.plot.height = 4)
plot(ts_start:(ts_start + t_len - 1), temperature, type = 'l',
lty = 1, xlab = 'year', ylab = 'temperature',
ylim = c(min(temperature) - 0.1, max(temperature) + 0.1))
title(main = "(a) observed yearly temperature", font.main = 1,
line = 0.5)
options(repr.plot.width = 16, repr.plot.height = 4)
plot(ts_start:(ts_start + t_len - 1), temperature, type = 'l',
lty = 1, xlab = 'year', ylab = 'temperature',
ylim = c(min(temperature) - 0.1, max(temperature) + 0.1))
title(main = "(a) observed yearly temperature", font.main = 1,
line = 0.5)
devtools::build_vignettes()
?str
table(gset$test)
# Chunk 1
knitr::opts_chunk$set(fig.width=12, fig.height=8)
# Chunk 2
require(multiscale)
data(temperature, package = "multiscale")
str(temperature)
# Chunk 3
t_len    <- length(temperature)
t_len
ts_start <- 1659
# Chunk 4
grid <- construct_grid(t_len)
str(grid$gset, max.level = 1, vec.len = 4)
# Chunk 5
parameters <- estimate_lrv(data = temperature,
q = 25, r_bar = 10, p = 2)
cat("Long-run variance is equal to ", parameters$lrv, "\n")
sigmahat <- sqrt(parameters$lrv)
# Chunk 6
alpha    <- 0.05
sim_runs <- 5000
# Chunk 7
deriv_order = 1
# Chunk 8
quantiles <- compute_quantiles(t_len = t_len, grid = grid,
sim_runs = 10)
probs <- as.vector(quantiles$quant[1, ])
pos   <- which.min(abs(probs - (1 - alpha)))
quant <- quantiles$quant[2, pos]
quant
# Chunk 9
result <- compute_statistics(data = temperature,
sigma = sigmahat,
grid = grid,
deriv_order = deriv_order)
str(result, max.level = 2, vec.len = 2)
table(gset$test)
gset         <- result$gset_with_vals
test_results <- (gset$vals_cor > quant) * sign(gset$vals)
gset$test    <- test_results
str(gset, max.level = 1, vec.len = 2)
table(gset$test)
library(multiscale)
results <- multiscale_test(data = temperature,
sigma = sigmahat,
grid = grid,
alpha = alpha,
deriv_order = deriv_order,
sim_runs = 10)
str(results, max.level = 2, vec.len = 2)
gset   <- results$gset_with_vals
reject <- subset(gset, test == 1, select = c(u, h))
p_plus <- data.frame('startpoint' = (reject$u - reject$h) * t_len + ts_start,
'endpoint' = (reject$u + reject$h) * t_len + ts_start,
'values' = 0)
p_plus$values <- (1:nrow(p_plus)) / nrow(p_plus)
#Produce minimal intervals
p_plus_min  <- compute_minimal_intervals(p_plus)
plot(NA, xlim=c(ts_start, ts_start + t_len - 1),
ylim = c(0, 1 + 1 / nrow(p_plus)),
xlab=" ", mgp=c(2, 0.5, 0), yaxt = "n", ylab = "")
title(main = "(c) (minimal) intervals produced by our test",
font.main = 1, line = 0.5)
title(xlab = "year", line = 1.7, cex.lab = 0.9)
segments(p_plus_min$startpoint, p_plus_min$values,
p_plus_min$endpoint, p_plus_min$values, lwd = 2)
segments(p_plus$startpoint, p_plus$values,
p_plus$endpoint, p_plus$values,
col = "gray")
gset   <- results$gset_with_vals
reject <- subset(gset, (test == 1 & u - h >= 0 & u + h <= 1), select = c(u, h))
p_plus <- data.frame('startpoint' = (reject$u - reject$h) * t_len + ts_start,
'endpoint' = (reject$u + reject$h) * t_len + ts_start,
'values' = 0)
p_plus$values <- (1:nrow(p_plus)) / nrow(p_plus)
#Produce minimal intervals
p_plus_min  <- compute_minimal_intervals(p_plus)
plot(NA, xlim=c(ts_start, ts_start + t_len - 1),
ylim = c(0, 1 + 1 / nrow(p_plus)),
xlab=" ", mgp=c(2, 0.5, 0), yaxt = "n", ylab = "")
title(main = "(c) (minimal) intervals produced by our test",
font.main = 1, line = 0.5)
title(xlab = "year", line = 1.7, cex.lab = 0.9)
segments(p_plus_min$startpoint, p_plus_min$values,
p_plus_min$endpoint, p_plus_min$values, lwd = 2)
segments(p_plus$startpoint, p_plus$values,
p_plus$endpoint, p_plus$values,
col = "gray")
gset   <- results$gset_with_vals
reject <- subset(gset, (test == 1 &  u + h <= 1), select = c(u, h))
p_plus <- data.frame('startpoint' = (reject$u - reject$h) * t_len + ts_start,
'endpoint' = (reject$u + reject$h) * t_len + ts_start,
'values' = 0)
p_plus$values <- (1:nrow(p_plus)) / nrow(p_plus)
#Produce minimal intervals
p_plus_min  <- compute_minimal_intervals(p_plus)
plot(NA, xlim=c(ts_start, ts_start + t_len - 1),
ylim = c(0, 1 + 1 / nrow(p_plus)),
xlab=" ", mgp=c(2, 0.5, 0), yaxt = "n", ylab = "")
title(main = "(c) (minimal) intervals produced by our test",
font.main = 1, line = 0.5)
title(xlab = "year", line = 1.7, cex.lab = 0.9)
segments(p_plus_min$startpoint, p_plus_min$values,
p_plus_min$endpoint, p_plus_min$values, lwd = 2)
segments(p_plus$startpoint, p_plus$values,
p_plus$endpoint, p_plus$values,
col = "gray")
gset   <- results$gset_with_vals
reject <- subset(gset, (test == 1 & u - h >= 0 ), select = c(u, h))
p_plus <- data.frame('startpoint' = (reject$u - reject$h) * t_len + ts_start,
'endpoint' = (reject$u + reject$h) * t_len + ts_start,
'values' = 0)
p_plus$values <- (1:nrow(p_plus)) / nrow(p_plus)
#Produce minimal intervals
p_plus_min  <- compute_minimal_intervals(p_plus)
plot(NA, xlim=c(ts_start, ts_start + t_len - 1),
ylim = c(0, 1 + 1 / nrow(p_plus)),
xlab=" ", mgp=c(2, 0.5, 0), yaxt = "n", ylab = "")
title(main = "(c) (minimal) intervals produced by our test",
font.main = 1, line = 0.5)
title(xlab = "year", line = 1.7, cex.lab = 0.9)
segments(p_plus_min$startpoint, p_plus_min$values,
p_plus_min$endpoint, p_plus_min$values, lwd = 2)
segments(p_plus$startpoint, p_plus$values,
p_plus$endpoint, p_plus$values,
col = "gray")
gset   <- results$gset_with_vals
reject <- subset(gset, (test == 1 & u - h >= 0 & u + h <= 1), select = c(u, h))
p_plus <- data.frame('startpoint' = (reject$u - reject$h) * t_len + ts_start,
'endpoint' = (reject$u + reject$h) * t_len + ts_start,
'values' = 0)
p_plus$values <- (1:nrow(p_plus)) / nrow(p_plus)
#Produce minimal intervals
p_plus_min  <- compute_minimal_intervals(p_plus)
plot(NA, xlim=c(ts_start, ts_start + t_len - 1),
ylim = c(0, 1 + 1 / nrow(p_plus)),
xlab=" ", mgp=c(2, 0.5, 0), yaxt = "n", ylab = "")
title(main = "(c) (minimal) intervals produced by our test",
font.main = 1, line = 0.5)
title(xlab = "year", line = 1.7, cex.lab = 0.9)
segments(p_plus_min$startpoint, p_plus_min$values,
p_plus_min$endpoint, p_plus_min$values, lwd = 2)
segments(p_plus$startpoint, p_plus$values,
p_plus$endpoint, p_plus$values,
col = "gray")
p_plus_min
library(multiscale)
devtools::build_vignettes()
devtools::build_vignettes()
grid <- construct_grid(t_len)
str(grid$gset, max.level = 1, vec.len = 4, list.len = 4)
result <- compute_statistics(data = temperature,
sigma = sigmahat,
grid = grid,
deriv_order = deriv_order)
str(result, max.level = 2, vec.len = 2, list.len = 4)
result <- compute_statistics(data = temperature,
sigma = sigmahat,
grid = grid,
deriv_order = deriv_order)
str(result, max.level = 2, vec.len = 2)
gset         <- result$gset_with_vals
test_results <- (gset$vals_cor > quant) * sign(gset$vals)
gset$test    <- test_results
str(gset, max.level = 1, vec.len = 2,  list.len = 4)
results <- multiscale_test(data = temperature,
sigma = sigmahat,
grid = grid,
alpha = alpha,
deriv_order = deriv_order,
sim_runs = 10)
str(results, max.level = 2, vec.len = 2)
result <- compute_statistics(data = covid, sigma = sigmahat,
n_ts = n, grid = grid)
str(result, max.level = 3, vec.len = 2, list.len = 4)
